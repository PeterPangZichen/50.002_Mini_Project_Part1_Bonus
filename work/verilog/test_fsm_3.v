/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_fsm_3 (
    input clk,
    input rst,
    output reg out
  );
  
  
  
  
  localparam C1_tester = 4'd0;
  localparam C2_tester = 4'd1;
  localparam C3_tester = 4'd2;
  localparam C4_tester = 4'd3;
  localparam C5_tester = 4'd4;
  localparam C6_tester = 4'd5;
  localparam C7_tester = 4'd6;
  localparam C8_tester = 4'd7;
  localparam F_tester = 4'd8;
  localparam P_tester = 4'd9;
  
  reg [3:0] M_tester_d, M_tester_q = C1_tester;
  
  reg M_registerx_d, M_registerx_q = 1'h0;
  
  reg M_registery_d, M_registery_q = 1'h0;
  
  reg M_registerc_d, M_registerc_q = 1'h0;
  
  reg M_registerchecker_d, M_registerchecker_q = 1'h0;
  
  reg checker;
  
  wire [1-1:0] M_fulladder_s;
  wire [1-1:0] M_fulladder_cout;
  reg [1-1:0] M_fulladder_x;
  reg [1-1:0] M_fulladder_y;
  reg [1-1:0] M_fulladder_cin;
  full_adder_2 fulladder (
    .x(M_fulladder_x),
    .y(M_fulladder_y),
    .cin(M_fulladder_cin),
    .s(M_fulladder_s),
    .cout(M_fulladder_cout)
  );
  
  always @* begin
    M_tester_d = M_tester_q;
    M_registerchecker_d = M_registerchecker_q;
    M_registerc_d = M_registerc_q;
    M_registerx_d = M_registerx_q;
    M_registery_d = M_registery_q;
    
    checker = M_registerchecker_q;
    M_fulladder_x = M_registerx_q;
    M_fulladder_y = M_registery_q;
    M_fulladder_cin = M_registerc_q;
    
    case (M_tester_q)
      C1_tester: begin
        if (M_fulladder_s == 1'h0 && M_fulladder_cout == 1'h0) begin
          M_tester_d = C2_tester;
          M_registerc_d = 1'h1;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C2_tester: begin
        if (M_fulladder_s == 1'h1 && M_fulladder_cout == 1'h0) begin
          M_tester_d = C3_tester;
          M_registery_d = 1'h1;
          M_registerc_d = 1'h0;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C3_tester: begin
        if (M_fulladder_s == 1'h1 && M_fulladder_cout == 1'h0) begin
          M_tester_d = C4_tester;
          M_registery_d = 1'h1;
          M_registerc_d = 1'h1;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C4_tester: begin
        if (M_fulladder_s == 1'h0 && M_fulladder_cout == 1'h1) begin
          M_tester_d = C5_tester;
          M_registerx_d = 1'h1;
          M_registerc_d = 1'h0;
          M_registery_d = 1'h0;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C5_tester: begin
        if (M_fulladder_s == 1'h1 & M_fulladder_cout == 1'h0) begin
          M_tester_d = C6_tester;
          M_registery_d = 1'h0;
          M_registerc_d = 1'h1;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C6_tester: begin
        if (M_fulladder_s == 1'h0 && M_fulladder_cout == 1'h1) begin
          M_tester_d = C7_tester;
          M_registery_d = 1'h1;
          M_registerc_d = 1'h0;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C7_tester: begin
        if (M_fulladder_s == 1'h0 && M_fulladder_cout == 1'h1) begin
          M_tester_d = C8_tester;
          M_registery_d = 1'h1;
          M_registerc_d = 1'h1;
        end else begin
          M_tester_d = F_tester;
        end
      end
      C8_tester: begin
        if (M_fulladder_s == 1'h0 && M_fulladder_cout == 1'h0) begin
          M_tester_d = P_tester;
        end else begin
          M_tester_d = F_tester;
        end
      end
      F_tester: begin
        M_registerchecker_d = 1'h1;
        M_tester_d = F_tester;
      end
      P_tester: begin
        M_registerchecker_d = 1'h1;
        M_tester_d = P_tester;
      end
    endcase
    out = checker;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_registerchecker_q <= 1'h0;
    end else begin
      M_registerchecker_q <= M_registerchecker_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_registerx_q <= 1'h0;
    end else begin
      M_registerx_q <= M_registerx_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_registery_q <= 1'h0;
    end else begin
      M_registery_q <= M_registery_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_registerc_q <= 1'h0;
    end else begin
      M_registerc_q <= M_registerc_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tester_q <= 1'h0;
    end else begin
      M_tester_q <= M_tester_d;
    end
  end
  
endmodule
